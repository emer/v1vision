// Code generated by "goki generate"; DO NOT EDIT.

package colorspace

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _LMSComponentsValues = []LMSComponents{0, 1, 2, 3, 4, 5, 6}

// LMSComponentsN is the highest valid value
// for type LMSComponents, plus one.
const LMSComponentsN LMSComponents = 7

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _LMSComponentsNoOp() {
	var x [1]struct{}
	_ = x[LC-(0)]
	_ = x[MC-(1)]
	_ = x[SC-(2)]
	_ = x[LMC-(3)]
	_ = x[LvMC-(4)]
	_ = x[SvLMC-(5)]
	_ = x[GREY-(6)]
}

var _LMSComponentsNameToValueMap = map[string]LMSComponents{
	`LC`:    0,
	`lc`:    0,
	`MC`:    1,
	`mc`:    1,
	`SC`:    2,
	`sc`:    2,
	`LMC`:   3,
	`lmc`:   3,
	`LvMC`:  4,
	`lvmc`:  4,
	`SvLMC`: 5,
	`svlmc`: 5,
	`GREY`:  6,
	`grey`:  6,
}

var _LMSComponentsDescMap = map[LMSComponents]string{
	0: `Long wavelength = Red component`,
	1: `Medium wavelength = Green component`,
	2: `Short wavelength = Blue component`,
	3: `Long + Medium wavelength = Yellow component`,
	4: `L - M opponent contrast: Red vs. Green`,
	5: `S - L+M opponent contrast: Blue vs. Yellow`,
	6: `achromatic response (grey scale lightness)`,
}

var _LMSComponentsMap = map[LMSComponents]string{
	0: `LC`,
	1: `MC`,
	2: `SC`,
	3: `LMC`,
	4: `LvMC`,
	5: `SvLMC`,
	6: `GREY`,
}

// String returns the string representation
// of this LMSComponents value.
func (i LMSComponents) String() string {
	if str, ok := _LMSComponentsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the LMSComponents value from its
// string representation, and returns an
// error if the string is invalid.
func (i *LMSComponents) SetString(s string) error {
	if val, ok := _LMSComponentsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _LMSComponentsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type LMSComponents")
}

// Int64 returns the LMSComponents value as an int64.
func (i LMSComponents) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the LMSComponents value from an int64.
func (i *LMSComponents) SetInt64(in int64) {
	*i = LMSComponents(in)
}

// Desc returns the description of the LMSComponents value.
func (i LMSComponents) Desc() string {
	if str, ok := _LMSComponentsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// LMSComponentsValues returns all possible values
// for the type LMSComponents.
func LMSComponentsValues() []LMSComponents {
	return _LMSComponentsValues
}

// Values returns all possible values
// for the type LMSComponents.
func (i LMSComponents) Values() []enums.Enum {
	res := make([]enums.Enum, len(_LMSComponentsValues))
	for i, d := range _LMSComponentsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type LMSComponents.
func (i LMSComponents) IsValid() bool {
	_, ok := _LMSComponentsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i LMSComponents) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *LMSComponents) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}

var _OpponentsValues = []Opponents{0, 1, 2}

// OpponentsN is the highest valid value
// for type Opponents, plus one.
const OpponentsN Opponents = 3

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _OpponentsNoOp() {
	var x [1]struct{}
	_ = x[WhiteBlack-(0)]
	_ = x[RedGreen-(1)]
	_ = x[BlueYellow-(2)]
}

var _OpponentsNameToValueMap = map[string]Opponents{
	`WhiteBlack`: 0,
	`whiteblack`: 0,
	`RedGreen`:   1,
	`redgreen`:   1,
	`BlueYellow`: 2,
	`blueyellow`: 2,
}

var _OpponentsDescMap = map[Opponents]string{
	0: `White vs. Black greyscale`,
	1: `Red vs. Green`,
	2: `Blue vs. Yellow`,
}

var _OpponentsMap = map[Opponents]string{
	0: `WhiteBlack`,
	1: `RedGreen`,
	2: `BlueYellow`,
}

// String returns the string representation
// of this Opponents value.
func (i Opponents) String() string {
	if str, ok := _OpponentsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the Opponents value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Opponents) SetString(s string) error {
	if val, ok := _OpponentsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _OpponentsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type Opponents")
}

// Int64 returns the Opponents value as an int64.
func (i Opponents) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Opponents value from an int64.
func (i *Opponents) SetInt64(in int64) {
	*i = Opponents(in)
}

// Desc returns the description of the Opponents value.
func (i Opponents) Desc() string {
	if str, ok := _OpponentsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// OpponentsValues returns all possible values
// for the type Opponents.
func OpponentsValues() []Opponents {
	return _OpponentsValues
}

// Values returns all possible values
// for the type Opponents.
func (i Opponents) Values() []enums.Enum {
	res := make([]enums.Enum, len(_OpponentsValues))
	for i, d := range _OpponentsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type Opponents.
func (i Opponents) IsValid() bool {
	_, ok := _OpponentsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Opponents) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Opponents) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
