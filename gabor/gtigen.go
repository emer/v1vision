// Code generated by "goki generate ./..."; DO NOT EDIT.

package gabor

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/vision/v2/gabor.Filter",
	ShortName:  "gabor.Filter",
	IDName:     "filter",
	Doc:        "gabor.Filter specifies a gabor filter function,\ni.e., a 2d Gaussian envelope times a sinusoidal plane wave.\nBy default it produces 2 phase asymmetric edge detector filters.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "bool", LocalType: "bool", Doc: "is this filter active?", Directives: gti.Directives{}, Tag: ""}},
		{"Wt", &gti.Field{Name: "Wt", Type: "float32", LocalType: "float32", Doc: "how much relative weight does this filter have when combined with other filters", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"Gain", &gti.Field{Name: "Gain", Type: "float32", LocalType: "float32", Doc: "overall gain multiplier applied after filtering -- only relevant if not using renormalization (otherwize it just gets renormed away)", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"2\""}},
		{"Size", &gti.Field{Name: "Size", Type: "int", LocalType: "int", Doc: "size of the overall filter -- number of pixels wide and tall for a square matrix used to encode the filter -- filter is centered within this square -- typically an even number, min effective size ~6", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"WvLen", &gti.Field{Name: "WvLen", Type: "float32", LocalType: "float32", Doc: "wavelength of the sine waves -- number of pixels over which a full period of the wave takes place -- typically same as Size (computation adds a 2 PI factor to translate into pixels instead of radians)", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"Spacing", &gti.Field{Name: "Spacing", Type: "int", LocalType: "int", Doc: "how far apart to space the centers of the gabor filters -- 1 = every pixel, 2 = every other pixel, etc -- high-res should be 1 or 2, lower res can be increments therefrom", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"SigLen", &gti.Field{Name: "SigLen", Type: "float32", LocalType: "float32", Doc: "gaussian sigma for the length dimension (elongated axis perpendicular to the sine waves) -- as a normalized proportion of filter Size", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.3\""}},
		{"SigWd", &gti.Field{Name: "SigWd", Type: "float32", LocalType: "float32", Doc: "gaussian sigma for the width dimension (in the direction of the sine waves) -- as a normalized proportion of filter size", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.15,0.2\""}},
		{"Phase", &gti.Field{Name: "Phase", Type: "float32", LocalType: "float32", Doc: "phase offset for the sine wave, in degrees -- 0 = asymmetric sine wave, 90 = symmetric cosine wave", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0,90\""}},
		{"CircleEdge", &gti.Field{Name: "CircleEdge", Type: "bool", LocalType: "bool", Doc: "cut off the filter (to zero) outside a circle of diameter = Size -- makes the filter more radially symmetric", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"true\""}},
		{"NAngles", &gti.Field{Name: "NAngles", Type: "int", LocalType: "int", Doc: "number of different angles of overall gabor filter orientation to use -- first angle is always horizontal", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"4\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
