// Code generated by "goki generate ./..."; DO NOT EDIT.

package nxx1

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/vision/v2/nxx1.Params",
	ShortName:  "nxx1.Params",
	IDName:     "params",
	Doc:        "Params are the Noisy X/(X+1) rate-coded activation function parameters.\nThis function well-characterizes the neural response function empirically,\nas a saturating sigmoid-like nonlinear response with an initial largely-linear regime.\nThe basic x/(x+1) sigmoid function is convolved with a gaussian noise kernel to produce\na better approximation of the effects of noise on neural firing -- the main effect is\nto create a continuous graded early level of firing even slightly below threshold, softening\nthe otherwise hard transition to firing at threshold.\nA hand-optimized piece-wise function approximation is used to generate the NXX1 function\ninstead of requiring a lookup table of the gaussian convolution.  This is much easier\nto use across a range of computational platforms including GPU's, and produces very similar\noverall values.  abc.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Thr", &gti.Field{Name: "Thr", Type: "float32", LocalType: "float32", Doc: "threshold value Theta (Q) for firing output activation (.5 is more accurate value based on AdEx biological parameters and normalization", Directives: gti.Directives{}, Tag: "def:\"0.5\""}},
		{"Gain", &gti.Field{Name: "Gain", Type: "float32", LocalType: "float32", Doc: "gain (gamma) of the rate-coded activation functions -- 100 is default, 80 works better for larger models, and 20 is closer to the actual spiking behavior of the AdEx model -- use lower values for more graded signals, generally in lower input/sensory layers of the network", Directives: gti.Directives{}, Tag: "def:\"80,100,40,20\" min:\"0\""}},
		{"NVar", &gti.Field{Name: "NVar", Type: "float32", LocalType: "float32", Doc: "variance of the Gaussian noise kernel for convolving with XX1 in NOISY_XX1 and NOISY_LINEAR -- determines the level of curvature of the activation function near the threshold -- increase for more graded responding there -- note that this is not actual stochastic noise, just constant convolved gaussian smoothness to the activation function", Directives: gti.Directives{}, Tag: "def:\"0.005,0.01\" min:\"0\""}},
		{"VmActThr", &gti.Field{Name: "VmActThr", Type: "float32", LocalType: "float32", Doc: "threshold on activation below which the direct vm - act.thr is used -- this should be low -- once it gets active should use net - g_e_thr ge-linear dynamics (gelin)", Directives: gti.Directives{}, Tag: "def:\"0.01\""}},
		{"SigMult", &gti.Field{Name: "SigMult", Type: "float32", LocalType: "float32", Doc: "multiplier on sigmoid used for computing values for net < thr", Directives: gti.Directives{}, Tag: "def:\"0.33\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"SigMultPow", &gti.Field{Name: "SigMultPow", Type: "float32", LocalType: "float32", Doc: "power for computing sig_mult_eff as function of gain * nvar", Directives: gti.Directives{}, Tag: "def:\"0.8\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"SigGain", &gti.Field{Name: "SigGain", Type: "float32", LocalType: "float32", Doc: "gain multipler on (net - thr) for sigmoid used for computing values for net < thr", Directives: gti.Directives{}, Tag: "def:\"3\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"InterpRange", &gti.Field{Name: "InterpRange", Type: "float32", LocalType: "float32", Doc: "interpolation range above zero to use interpolation", Directives: gti.Directives{}, Tag: "def:\"0.01\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"GainCorRange", &gti.Field{Name: "GainCorRange", Type: "float32", LocalType: "float32", Doc: "range in units of nvar over which to apply gain correction to compensate for convolution", Directives: gti.Directives{}, Tag: "def:\"10\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"GainCor", &gti.Field{Name: "GainCor", Type: "float32", LocalType: "float32", Doc: "gain correction multiplier -- how much to correct gains", Directives: gti.Directives{}, Tag: "def:\"0.1\" view:\"-\" json:\"-\" xml:\"-\""}},
		{"SigGainNVar", &gti.Field{Name: "SigGainNVar", Type: "float32", LocalType: "float32", Doc: "sig_gain / nvar", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"SigMultEff", &gti.Field{Name: "SigMultEff", Type: "float32", LocalType: "float32", Doc: "overall multiplier on sigmoidal component for values below threshold = sig_mult * pow(gain * nvar, sig_mult_pow)", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"SigValAt0", &gti.Field{Name: "SigValAt0", Type: "float32", LocalType: "float32", Doc: "0.5 * sig_mult_eff -- used for interpolation portion", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"InterpVal", &gti.Field{Name: "InterpVal", Type: "float32", LocalType: "float32", Doc: "function value at interp_range - sig_val_at_0 -- for interpolation", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
