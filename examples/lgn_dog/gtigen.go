// Code generated by "goki generate ./..."; DO NOT EDIT.

package main

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "main.Vis",
	ShortName: "main.Vis",
	IDName:    "vis",
	Doc:       "Vis encapsulates specific visual processing pipeline in\nuse in a given case -- can add / modify this as needed",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ImageFile", &gti.Field{Name: "ImageFile", Type: "goki.dev/gi.FileName", LocalType: "gi.FileName", Doc: "name of image file to operate on", Directives: gti.Directives{}, Tag: ""}},
		{"DoG", &gti.Field{Name: "DoG", Type: "github.com/emer/vision/v2/dog.Filter", LocalType: "dog.Filter", Doc: "LGN DoG filter parameters", Directives: gti.Directives{}, Tag: ""}},
		{"Geom", &gti.Field{Name: "Geom", Type: "github.com/emer/vision/v2/vfilter.Geom", LocalType: "vfilter.Geom", Doc: "geometry of input, output", Directives: gti.Directives{}, Tag: "edit:\"-\""}},
		{"ImgSize", &gti.Field{Name: "ImgSize", Type: "image.Point", LocalType: "image.Point", Doc: "target image size to use -- images will be rescaled to this size", Directives: gti.Directives{}, Tag: ""}},
		{"DoGTsr", &gti.Field{Name: "DoGTsr", Type: "github.com/emer/etable/v2/etensor.Float32", LocalType: "etensor.Float32", Doc: "DoG filter tensor -- has 3 filters (on, off, net)", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"DoGTab", &gti.Field{Name: "DoGTab", Type: "github.com/emer/etable/v2/etable.Table", LocalType: "etable.Table", Doc: "DoG filter table (view only)", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Img", &gti.Field{Name: "Img", Type: "image.Image", LocalType: "image.Image", Doc: "current input image", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"ImgTsr", &gti.Field{Name: "ImgTsr", Type: "github.com/emer/etable/v2/etensor.Float32", LocalType: "etensor.Float32", Doc: "input image as tensor", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"OutTsr", &gti.Field{Name: "OutTsr", Type: "github.com/emer/etable/v2/etensor.Float32", LocalType: "etensor.Float32", Doc: "DoG filter output tensor", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{
		{"OpenImage", &gti.Method{Name: "OpenImage", Doc: "OpenImage opens given filename as current image Img\nand converts to a float32 tensor for processing", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"filepath", &gti.Field{Name: "filepath", Type: "string", LocalType: "string", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		})}},
		{"Filter", &gti.Method{Name: "Filter", Doc: "Filter is overall method to run filters on current image file name\nloads the image from ImageFile and then runs filters", Directives: gti.Directives{
			&gti.Directive{Tool: "gti", Directive: "add", Args: []string{}},
		}, Args: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}), Returns: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
			{"error", &gti.Field{Name: "error", Type: "error", LocalType: "error", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		})}},
	}),
})
