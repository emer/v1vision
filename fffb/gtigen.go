// Code generated by "goki generate ./..."; DO NOT EDIT.

package fffb

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/vision/v2/fffb.Params",
	ShortName:  "fffb.Params",
	IDName:     "params",
	Doc:        "Params parameterizes feedforward (FF) and feedback (FB) inhibition (FFFB)\nbased on average (or maximum) netinput (FF) and activation (FB)",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "bool", LocalType: "bool", Doc: "enable this level of inhibition", Directives: gti.Directives{}, Tag: ""}},
		{"Gi", &gti.Field{Name: "Gi", Type: "float32", LocalType: "float32", Doc: "overall inhibition gain -- this is main parameter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\" def:\"1.8\""}},
		{"FF", &gti.Field{Name: "FF", Type: "float32", LocalType: "float32", Doc: "overall inhibitory contribution from feedforward inhibition -- multiplies average netinput (i.e., synaptic drive into layer) -- this anticipates upcoming changes in excitation, but if set too high, it can make activity slow to emerge -- see also ff0 for a zero-point for this value", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\" def:\"1\""}},
		{"FB", &gti.Field{Name: "FB", Type: "float32", LocalType: "float32", Doc: "overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\" def:\"1\""}},
		{"FBTau", &gti.Field{Name: "FBTau", Type: "float32", LocalType: "float32", Doc: "time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating feedback inhibitory values -- prevents oscillations that otherwise occur -- the fast default of 1.4 should be used for most cases but sometimes a slower value (3 or higher) can be more robust, especially when inhibition is strong or inputs are more rapidly changing", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\" def:\"1.4,3,5\""}},
		{"MaxVsAvg", &gti.Field{Name: "MaxVsAvg", Type: "float32", LocalType: "float32", Doc: "what proportion of the maximum vs. average netinput to use in the feedforward inhibition computation -- 0 = all average, 1 = all max, and values in between = proportional mix between average and max (ff_netin = avg + ff_max_vs_avg * (max - avg)) -- including more max can be beneficial especially in situations where the average can vary significantly but the activity should not -- max is more robust in many situations but less flexible and sensitive to the overall distribution -- max is better for cases more closely approximating single or strictly fixed winner-take-all behavior -- 0.5 is a good compromise in many cases and generally requires a reduction of .1 or slightly more (up to .3-.5) from the gi value for 0", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0,0.5,1\""}},
		{"FF0", &gti.Field{Name: "FF0", Type: "float32", LocalType: "float32", Doc: "feedforward zero point for average netinput -- below this level, no FF inhibition is computed based on avg netinput, and this value is subtraced from the ff inhib contribution above this value -- the 0.1 default should be good for most cases (and helps FF_FB produce k-winner-take-all dynamics), but if average netinputs are lower than typical, you may need to lower it", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.1\""}},
		{"FBDt", &gti.Field{Name: "FBDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"-\" json:\"-\" xml:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/vision/v2/fffb.Inhib",
	ShortName:  "fffb.Inhib",
	IDName:     "inhib",
	Doc:        "Inhib contains state values for computed FFFB inhibition",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"FFi", &gti.Field{Name: "FFi", Type: "float32", LocalType: "float32", Doc: "computed feedforward inhibition", Directives: gti.Directives{}, Tag: ""}},
		{"FBi", &gti.Field{Name: "FBi", Type: "float32", LocalType: "float32", Doc: "computed feedback inhibition (total)", Directives: gti.Directives{}, Tag: ""}},
		{"Gi", &gti.Field{Name: "Gi", Type: "float32", LocalType: "float32", Doc: "overall value of the inhibition -- this is what is added into the unit Gi inhibition level (along with any synaptic unit-driven inhibition)", Directives: gti.Directives{}, Tag: ""}},
		{"GiOrig", &gti.Field{Name: "GiOrig", Type: "float32", LocalType: "float32", Doc: "original value of the inhibition (before pool or other effects)", Directives: gti.Directives{}, Tag: ""}},
		{"LayGi", &gti.Field{Name: "LayGi", Type: "float32", LocalType: "float32", Doc: "for pools, this is the layer-level inhibition that is MAX'd with the pool-level inhibition to produce the net inhibition", Directives: gti.Directives{}, Tag: ""}},
		{"Ge", &gti.Field{Name: "Ge", Type: "github.com/emer/etable/v2/minmax.AvgMax32", LocalType: "minmax.AvgMax32", Doc: "average and max Ge excitatory conductance values, which drive FF inhibition", Directives: gti.Directives{}, Tag: ""}},
		{"Act", &gti.Field{Name: "Act", Type: "github.com/emer/etable/v2/minmax.AvgMax32", LocalType: "minmax.AvgMax32", Doc: "average and max Act activation values, which drive FB inhibition", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/vision/v2/fffb.Inhibs",
	ShortName:  "fffb.Inhibs",
	IDName:     "inhibs",
	Doc:        "Inhibs is a slice of Inhib records",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
